# bashrc - GNU bash source script for bash rc, login
#
# To use:
#     place this directory at ~/.bash.d
#     link to ~/.bashrc, in $HOME directory:
#     ln -s .bash.d/bashrc .bashrc

## Essential shell environment bootstrapping.

# Use custom bash functions.
export BASH_DIR=$HOME/.bash.d
source $BASH_DIR/functions.bash

# virtualenvwrapper for Python
ship WORKON_HOME=$HOME/.virtualenvs
ship WORKON_HOME=$HOME/.virtualenvs-`uname -n`
receive $HOME/bin/virtualenvwrapper.sh >/dev/null 2>&1

function on_new_shell() {
    # Set bak command to hit SD card if mounted.
    ship BAK_HOME=/media/f9e562d6-248e-4bc2-b60a-265dda529df4

    receive $HOME/.config/host/${HOSTNAME:-default}/bashrc

    export VIRTUALENVWRAPPER_PYTHON=`which python2.7`

    # If not running interactively, don't do anything further.
    if [ -z "$PS1" ]; then
        return
    fi

    # Set prompt PS1 to "user@host dir$ "
    export PS1='\u@\h \W\$ '

    # Set the virtual environment.
    if [ "$USE_VIRTUALENV" != "false" ]; then
        workon_walk
        receive $PWD/.env/bin/activate
        receive $PWD/env/bin/activate
    fi

    # Enable color support of ls.
    if [ "$TERM" != "dumb" ]; then
        if ( which dircolors >/dev/null 2>&1 ); then
            eval "`dircolors -b`"
            alias ls='ls --color=auto'
        fi
    fi

    # check the window size after each command and, if necessary,
    # update the values of LINES and COLUMNS.
    shopt -s checkwinsize

    if [ -z "$SSH_AUTH_SOCK" ]; then
        receive $HOME/.ssh/agent.bash
    fi

    receive /etc/bash_completion
    receive $BASH_DIR/bash_completion

    # Alias git completion to homegit script.
    complete -o default -o nospace -F _git homegit >/dev/null 2>&1
    complete -o default -o nospace -F _tig hometig >/dev/null 2>&1
}

function docker-cleanup() {
    if ! which docker > /dev/null; then
        echo 'docker: command not found' >&2
        return 2
    fi
    exited=$(docker ps -a -q -f status=exited)
    if [ -n "$exited" ]; then
        docker rm -v $exited
    fi
    dangling=$(docker images -f dangling=true -q)
    if [ -n "$dangling" ]; then
        docker rmi $dangling
    fi
}


# Avoid mangling the various PATHS on new bash invocations.
if [ -n "$BASHRC_INITIALIZED" ]; then
    on_new_shell
    return
fi

## PATH management.

# Set important paths.
prepend PATH /bin /sbin
prepend LD_LIBRARY_PATH /lib /lib32 /lib/i386-linux-gnu /lib64 /lib/x86_64-linux-gnu

prepend PATH /usr/bin /usr/sbin
prepend LD_LIBRARY_PATH /usr/lib /usr/lib32 /usr/lib/i386-linux-gnu /usr/lib64 /usr/lib/x86_64-linux-gnu
prepend MANPATH /usr/man /usr/share/man

prepend PATH /usr/local/bin /usr/local/sbin
prepend LD_LIBRARY_PATH /usr/local/lib /usr/local/lib32 /usr/local/lib/i386-linux-gnu /usr/local/lib64 /usr/local/lib/x86_64-linux-gnu
prepend MANPATH /usr/local/man /usr/local/share/man

prepend PATH /opt/local/bin /opt/local/sbin
prepend LD_LIBRARY_PATH /opt/local/lib /opt/local/lib32 /opt/local/lib64
prepend MANPATH /opt/local/man /opt/local/share/man

prepend PATH /opt/*/bin
prepend LD_LIBRARY_PATH /opt/*/lib /opt/*/lib32 /opt/*/lib64
prepend MANPATH /opt/*/man /opt/*/share/man

prepend PATH $HOME/bin
prepend LD_LIBRARY_PATH $HOME/lib $HOME/lib32 $HOME/lib64
prepend MANPATH $HOME/man $HOME/share/man

prepend PATH $HOME/usr/bin
prepend LD_LIBRARY_PATH $HOME/usr/lib $HOME/usr/lib32 $HOME/usr/lib64
prepend MANPATH $HOME/usr/man $HOME/usr/share/man

append PATH $HOME/sandbox/android/sdk/platform-tools
append PATH $HOME/sandbox/android/sdk/tools

append PATH $HOME/.*-dist/bin

for envtool in pyenv rbenv; do
    prepend PATH $HOME/.${envtool}/bin
    which $envtool >/dev/null 2>&1 && eval "$($envtool init -)"
done

export PATH
export LD_LIBRARY_PATH
export MANPATH

## ... and so on.

# Put snagged files from bin/snag in obvious place: home.
export SNAG_HOME=$HOME

# Have bin/screen choose opt screen if installed.
ship SCREEN=/opt/screen/bin/screen
ship SCREENRC_DEFAULT=$HOME/.screenrc-default

# Set Android / Java defaults.
ship M2_HOME=/usr/share/maven2
ship M3_HOME=/opt/maven
ship ANDROID_HOME=/home/rduplain/sandbox/android/sdk
ship JAVA_HOME=/usr/lib/jvm/java-6-sun
ship IDEA_JDK=/usr/lib/jvm/jdk1.6.0_26

# Go language.
export GOPATH=$HOME/.go
append PATH $GOPATH/bin

# Set Python defaults.
ship PYTHONSTARTUP="$HOME/.pythonrc.py"
prepend PYTHONPATH $HOME/lib/python/site-packages
prepend PYTHONPATH $HOME/lib/python
export PYTHONPATH

# RVM for Ruby
# receive $HOME/.rvm/scripts/rvm
# rvm use ruby-1.8.7 > /dev/null 2>&1

function workon_walk () {
    # Walk the directory tree upward until:
    #  * a virtualenv is found which matches the name of a directory
    #  * the root directory is reached (no virtualenv found)
    #
    # Activate the identified virtualenv with virtualenvwrapper's workon.
    dir=${PWD}
    while [ -n "$dir" ]; do
        workon ${dir##*/} >/dev/null 2>&1
        if [ $? -eq 0 ]; then
            break
        fi
        dir=${dir%/*}
    done
}

# Provide workon_walk to new shell invocations.
export -f workon_walk

on_new_shell

# If not running interactively, don't do anything further.
if [ -z "$PS1" ]; then
    return
fi

# pydoc within a virtualenv
alias pydoc='python `which pydoc`'

# pip for Python
ship PIP_VIRTUALENV_BASE=$WORKON_HOME

ship R_LIBS_USER=$HOME/.r

# Set editor and essential program defaults.
alias emacs='emacs -nw'

export EDITOR='emacs -nw'
export VISUAL=vi
export TEXEDIT=$EDITOR
export PAGER=less
export GZIP="-9"

# Set locale.
export LC_ALL=en_US.UTF-8

# Make less more friendly for non-text input files, see lesspipe(1).
[[ -x /usr/bin/lesspipe ]] && eval "$(lesspipe)"

# todo.txt
alias todo=todo.sh
alias t=todo.sh

# If this is an xterm set the title to "user@host dir"
case "$TERM" in
xterm*|rxvt*)
    PROMPT_COMMAND='history -a; echo -ne "\033]0;${USER}@${HOSTNAME} ${PWD/$HOME/~}\007"'
    ;;
*)
    PROMPT_COMMAND='history -a'
    ;;
esac
export PROMPT_COMMAND

# Don't put duplicate lines in the history. See bash(1) for more options.
export HISTCONTROL=ignoreboth
export HISTFILESIZE=9999
export HISTSIZE=20000
export FCEDIT=$EDITOR
export FIGNORE='~'
unset MAILCHECK MAILPATH
unset CDPATH

export WORKSPACES_RESERVED=5

function commands () {
    history | cut -c8- | sort | uniq -c | sort -rn | head
}

# Load a simple script with executes `export GITHUB_TOKEN=...`.
receive .gitconfig.github.sh

# Set a sentinel variable to the current time in seconds since epoch.
export BASHRC_INITIALIZED=`date +%s`
