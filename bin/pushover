#!/usr/bin/env bash
# Send argument string as message to Pushover push notification service.

# Exit immediately if a command error or non-zero return occurs.
set -e

PUSHOVER_URL=${PUSHOVER_URL-https://api.pushover.net/1/messages.json}
PUSHOVER_ENV=${PUSHOVER_ENV-$HOME/.pushover}

INDEX=               # Number of arguments to shift after parsing arguments.
TITLE=$HOSTNAME      # Title of Pushover message.

TITLE=${PUSHOVER_TITLE-$TITLE}

usage() {
    echo "usage: pushover [-t TITLE] MESSAGE..." >&2
    return 2
}

source_env() {
    # Source a .env style file containing shell variables.

    local env="$1"

    if [ -e "$env" ]; then
        source "$env"
    fi
}

parse_arguments() {
    # Parse command-line arguments.

    while getopts ":t:" opt; do
        case $opt in
            t)
                TITLE="$OPTARG"
                ;;
            \?|:)
                usage
                ;;
        esac
    done

    INDEX=$((OPTIND - 1))
}

main() {
    # Send all arguments to Pushover.

    parse_arguments "$@"
    shift $INDEX

    if [ $# -eq 0 ]; then
        usage
        return 2
    fi

    source_env "$PUSHOVER_ENV"

    if [ -z "$PUSHOVER_TOKEN" ] || [ -z "$PUSHOVER_USER" ]; then
        echo "pushover: Set PUSHOVER_TOKEN and PUSHOVER_USER in $PUSHOVER_ENV."
        return 2
    fi

    arg=(
        --form-string "token=${PUSHOVER_TOKEN}"
        --form-string "user=${PUSHOVER_USER}"
        --form-string "message=$@"
    )

    if [ -n "$TITLE" ]; then
        arg+=(--form-string "title=$TITLE")
        notification="$TITLE - $@"
    else
        notification="$@"
    fi

    if which notify-send > /dev/null 2>&1; then
        # Send as a local notification as well.
        notify-send "$notification" || true
    fi

    {
        echo "Sending message to Pushover ..."
        curl -s "${arg[@]}" "$PUSHOVER_URL"
        echo
    } >&2
}

main "$@"
