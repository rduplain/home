#!/usr/bin/env bash
# Auto-clone project based on metadata in .git-auto-clone file.
#
# In .git-auto-clone in current directory or any parent directory:
#
#     project1        git@github.com:owner/repo1.git
#     project2        git@github.com:owner/repo2.git
#     nested/project3 git@github.com:owner/repo3.git
#
# Directories .git-auto-clone are created relative to working directory.

find_git_auto_clone_file() {
    # Find nearest .git-auto-clone file in directory ancestry, print to stdout.

    local cur="$PWD"
    local dir="$cur"

    while [ -n "$dir" ]; do
        if [ -e "$dir"/.git-auto-clone ]; then
            echo "$dir"/.git-auto-clone
            return
        fi

        dir="${dir%/*}"
    done
}

list_available() {
    local project

    {
        for project in $(list_projects); do
            if [ ! -e "$project" ]; then
                echo "$project"
            fi
        done
    } | sort -u
}

list_projects() {
    awk '{ print $1 }' "$(find_git_auto_clone_file)" | sort -u
}

lookup_project() {
    local project_name
    project_name="$1"
    shift

    if [ -z "$project_name" ]; then
        return 1
    fi

    local auto_clone_file line

    auto_clone_file="$(find_git_auto_clone_file)"

    line="$(grep -h "[:/]${project_name}\.git" "$auto_clone_file" | tail -1)"

    if [ -z "$line" ]; then
        line="$(grep -h "^${project_name} " "$auto_clone_file" | tail -1)"
    fi

    if [ -z "$line" ]; then
        return 1
    fi

    local dir url
    dir="$(echo "$line" | awk '{ print $1 }')"
    url="$(echo "$line" | awk '{ print $2 }')"

    echo "$dir $url"
}

main() {
    local auto_clone_file
    auto_clone_file="$(find_git_auto_clone_file)"

    if [ -z "$auto_clone_file" ]; then
        echo "git auto-clone: no .git-auto-clone file found." >&2
        return 1
    fi

    # Provide hooks for introspection.
    case "$1" in
        --available)
            list_available
            return
            ;;
        --find)
            find_git_auto_clone_file
            return
            ;;
        --list)
            list_projects
            return
            ;;
        --lookup)
            lookup_project "$2"
            return
            ;;
    esac

    if [ $# -ne 1 ]; then
        echo "usage: git auto-clone PROJECT_NAME" >&2
        return 2
    fi

    local project_name
    project_name="$1"
    shift

    local dir_url dir url
    dir_url="$(lookup_project "$project_name")"

    if [ -z "$dir_url" ]; then
        echo "git auto-clone: no '$project_name' found in $auto_clone_file" >&2
        return 1
    fi

    dir="$(echo "$dir_url" | awk '{ print $1 }')"
    url="$(echo "$dir_url" | awk '{ print $2 }')"

    git clone "$url" "$dir"
}

main "$@"
