#!/usr/bin/env bash
# Wrap `git` to use .homegit.

TIGLIKE=${TIGLIKE:-"%C(blue)%ad %C(green)%<(19)%an%C(auto)%h%d %C(reset)%s"}
TIGLIKE_DATE_FORMAT=${TIGLIKE_DATE_FORMAT:-"%Y-%m-%d %H:%M"}

declare -a arg
declare git

use_homegit() {
    [ -n "$USE_HOMEGIT" ] || \
        ( [ -d .homegit ] && ! [ -d .git ] ) || \
        [ "$PWD" = "$HOME/bin" ]
}

git_back_to() {
    local b target tmp

    if [ $# -ne 1 ]; then
        echo "usage: git back-to BRANCH" >&2
        return 2
    fi

    target="$1"
    shift

    if ! prompt_yn "Delete all local branches & re-checkout $target?"; then
        return 1
    fi

    echo 'Proceeding. Take a look at `git reflog` in case of problems.' >&2
    echo

    set -e

    tmp="git-back-to-$(date +%s)"
    "$git" "${arg[@]}" checkout -b "$tmp" >/dev/null 2>&1

    for b in $("$git" "${arg[@]}" for-each-ref refs/heads | cut -d/ -f3-); do
        if [ "$b" = "$tmp" ]; then
            continue
        fi

        "$git" "${arg[@]}" branch -D "$b"
    done

    echo

    "$git" "${arg[@]}" checkout "$target"
    "$git" "${arg[@]}" branch -D "$tmp" >/dev/null 2>&1
}

git_set_url() {
    # Assume running from within project root.
    url=git@github.com:$(id -un)/${PWD##*/}.git
    echo "Setting remote origin to $(id -un)'s GitHub ..."
    "$git" "${arg[@]}" remote set-url origin "$url"
    "$git" "${arg[@]}" remote get-url origin
}

git_tiglike() {
    exec env PAGER="less -S" "$git" "${arg[@]}" log \
         --pretty=format:"$TIGLIKE" \
         --date=format:"$TIGLIKE_DATE_FORMAT" \
         -- "$@"
}

main() {
    DIR="$( cd -P "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
    . "$DIR"/wrapper.bash

    if requested_only _source "$@"; then
        # Make `. git _source` available to pull in functions.
        return 0
    fi

    git="$(set_aside_this_and_find_that "$DIR" git)"

    if [ -z "$git" ]; then
        # No other `git` found.
        # Expect set-aside function to write a not-found message to stderr.
        return 2
    fi

    declare -a arg

    if use_homegit && ! requested clone "$@"; then
        arg=( --git-dir="$HOME"/.homegit --work-tree="$HOME" )
    else
        arg=( )
    fi

    if requested back-to "$1"; then
        shift
        git_back_to "$@"
    elif requested_only set-url "$@"; then
        git_set_url "$@"
    elif requested tiglike "$1"; then
        shift
        git_tiglike "$@"
    else
        exec "$git" "${arg[@]}" "$@"
    fi
}

main "$@"
