#!/usr/bin/env bash
# Wrap `git` to use .homegit.

use_homegit() {
    [ -n "$USE_HOMEGIT" ] || \
        ( [ -d .homegit ] && ! [ -d .git ] ) || \
        [ "$PWD" = "$HOME/bin" ]
}

humanish() {
    # Print "humanish" name of repository to stdout, given its URL.
    #
    # For example: git@github.com:owner/project.git is "project".

    url="$1"
    shift

    echo "$url" | sed -e 's,/$,,' -e 's,:*/*\.git$,,' -e 's,.*[/:],,g'
}

git_on_clone() {
    # Determine path to newly cloned git repo and run `git on-clone` inside.

    local -a arg path
    arg=( )

    # Find non-subcommand, non-flag arguments to determine whether path given.
    for x; do
        case "$x" in
            auto-clone|clone|-*)
                :;;
            *)
                arg+=( "$x" )
                ;;
        esac
    done

    if [ "$1" = "auto-clone" ]; then
        path="$2"
    else
        if [ "${#arg[@]}" -eq 2 ]; then
            path="${arg[1]}"
        else
            path="$(humanish "${arg[0]}")"
        fi
    fi

    # Some clone CLI invocations are informational.
    if [ -n "$path" ] && [ -d "$path" ]; then
        cd "$path"; git on-clone
    fi
}

main() {
    DIR="$( cd -P "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
    . "$DIR"/wrapper.bash

    if requested_only _source "$@"; then
        # Make `. git _source` available to pull in functions.
        return 0
    fi

    git="$(set_aside_this_and_find_that "$DIR" git)"

    if [ -z "$git" ]; then
        # No other `git` found.
        # Expect set-aside function to write a not-found message to stderr.
        return 2
    fi

    declare -a arg

    if use_homegit && ! requested clone "$@"; then
        arg=( --git-dir="$HOME"/.homegit --work-tree="$HOME" )
    elif requested clone "$@" || requested auto-clone "$@"; then
        if "$git" "$@"; then
            git_on_clone "$@"
        fi
        return $?
    elif requested_only "sync"; then
        git-sync
    else
        arg=( )
    fi

    exec "$git" "${arg[@]}" "$@"
}

main "$@"
