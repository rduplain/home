#!/usr/bin/env bash
# Push remote-only branch using top-line summary of most recent commit.
#
# Relevant details are inferred based on current remote tracking branch.
# When GitHub, assume that the pull request is on the same remote as upstream.
#
# Projects with trunk-based development and code review on each merge end up
# with short incremental changes as the project becomes stable. In this state,
# work is done in the trunk/mainline branch, but instead of pushing directly,
# push to a branch to serve as source to a pull request or code review.
#
# Create a pull request automatically using `curl`, if remote is GitHub, Python
# is installed (for JSON encoding), and a GITHUB TOKEN exists.
# See GITHUB TOKEN.
#
# Generally, after issuing `git quick-push`, with the new branch safely pushed
# to the remote, issue a `git reset --hard` on the upstream branch to continue
# development.

# GITHUB TOKEN
#
# Create a new token with full `repo` access, written to ~/.github-token.
# https://github.com/settings/tokens

# Set defaults.
: "${GIT_QUICK_BACKOFF:=2}"
: "${GITHUB_API_URL:=https://api.github.com}"
: "${GITHUB_USERNAME:=$(id -un)}"
: "${GITHUB_TOKEN_PATH:=$HOME/.github-token}"

git_quick_push_name() {
    # Print name of new branch using top-line summary of most recent commit.

    echo -n "${GIT_QUICK_PREFIX}"
    git log --pretty=format:%s -n 1  |
        head -1                      |
        tr '[:upper:]' '[:lower:]'   |
        sed -e 's/[ _]/-/g'          |
        sed -e 's/[^A-Za-z0-9_-]//g'
    echo
}

git_quick_push() {
    # Push remote-only branch.

    if [ -z "$(local_branch)" ]; then
        echo "error: not on any branch." >&2
        return 5
    fi

    git push "$(remote)" "$(local_branch)":"$(git_quick_push_name)"
}

github_pull_request() {
    # Create a pull request on upstream using sensible defaults.

    local owner repo
    eval "$(owner_repo)"

    curl -s "$GITHUB_API_URL"/repos/"$owner"/"$repo"/pulls \
         --user "$GITHUB_USERNAME:$(github_token)" \
         --data "$(cat <<EOF
{"title": $(pull_request_title | json_encode),
 "body": $(pull_request_body | json_encode),
 "head": $(git_quick_push_name | tr -d '\n' | json_encode),
 "base": $(remote_branch | tr -d '\n' | json_encode)}
EOF
)"
}

github_token() {
    # Print ~/.github-token or nothing if token does not exist.

    if [ -e "$GITHUB_TOKEN_PATH" ]; then
        cat "$GITHUB_TOKEN_PATH"
    fi
}

is_github() {
    git remote get-url "$(remote)" | grep -iqw 'github\.com'
}

local_branch() {
    # Print name of current local branch, or nothing if not on a branch.

    git symbolic-ref HEAD 2>/dev/null | cut -d/ -f3-
}

json_encode() {
    # JSON-encode stdin to stdout.

    python -c 'import json,sys; print(json.dumps(sys.stdin.read()))'
}

json_get_html_url() {
    # Extract "html_url" key from root of JSON object in stdin.

    key="html_url"
    python -c \
     "import json,sys; print(json.loads(sys.stdin.read()).get('$key', ''))" \
      2>/dev/null
}

owner_repo() {
    # Print owner=OWNER repo=REPO parsed from GitHub URL of remote.

    local owner_repo
    owner_repo="$(git remote get-url "$(remote)" |
                  sed -e 's/.*github\.com.//g' -e 's/\.git$//g')"

    echo owner="$(echo "$owner_repo" | cut -d/ -f1)"
    echo repo="$(echo "$owner_repo" | cut -d/ -f2)"
}

pull_request_body() {
    # Print body of most recent commit as body of pull request.
    #
    # If pandoc installed, launder body content to reflow newlines as spaces.
    # (GitHub Flavored Markdown treats newlines literally in paragraphs.)

    if which pandoc >/dev/null 2>&1; then
        git show -s --format=%B HEAD | \
            tail -n+2 | \
            pandoc --wrap=none -f markdown - -t markdown -o -
    else
        git show -s --format=%B HEAD | tail -n+2
    fi
}

pull_request_title() {
    # Print top-line summary of most recent commit as title of pull request.

    git show -s --format=%s HEAD | tr -d '\n'
}

remote() {
    # Print name of remote in remote-tracked branch.

    upstream | cut -d/ -f1
}

remote_branch() {
    # Print name of branch only in remote-tracked branch.

    upstream | cut -d/ -f2-
}

unpushed_commits() {
    # List commit hash of unpushed commits, one per line.

    git log --oneline "$(upstream)"..HEAD --pretty=format:"%H"
}

upstream() {
    # Report upstream ref, e.g. 'origin/master' (without quotes), to stdout.

    git rev-parse --abbrev-ref --symbolic-full-name '@{upstream}' 2>/dev/null
}

main() {
    if [ -z "$(upstream)" ]; then
        echo "error: not tracking a remote branch." >&2
        return 3
    fi

    if [ -z "$(unpushed_commits)" ]; then
        echo "no unpushed commits." >&2
        return 4
    fi

    local response url

    if [ "$1" = "--name" ]; then
        shift
        git_quick_push_name "$@"
    else
        git_quick_push >&2

        if is_github && \
                [ -n "$(github_token)" ] && \
                which python >/dev/null 2>&1;
        then
            echo "Opening pull request ..." >&2
            sleep "$GIT_QUICK_BACKOFF"
            response="$(github_pull_request)"

            url="$(printf %s "$response" | json_get_html_url)"

            if [ -z "$url" ]; then
                printf %s "$response"
                echo
                echo "Pull request failed." >&2
                return 1
            fi

            echo "$url"
        fi
    fi
}

main "$@"
