#!/usr/bin/env bash
# Wrap `screen` to enable the command line as IDE.
#
# SCREENRC configures the filename of GNU screen's rc configuration file.
# SCREENRC_DEFAULT configures the filepath of the default .screenrc to use.
#
# Look for a project-local .screenrc file, in order:
#
# 1. A local .screenrc-username file, to allow personalization.
# 2. A local .screenrc file, able to be checked in with a project.
# 3. The file at $SCREENRC_DEFAULT, as a fallback.
#
# By convention, a project-local .screenrc sources $HOME/.screenrc.
#
# See: ~/.screenrc-default

SCREEN=
SCREEN_WRAPPER=

SCREENRC="${SCREENRC:-.screenrc}"
SCREENRC_DEFAULT="${SCREENRC_DEFAULT:-$HOME/$SCREENRC}"

# Optional sideloaded disambiguating parent directory.
#
# When starting a new screen session with `screen -r group/project`, a
# side-loaded SESSION_PARENT_DIR=group helps ensure disambiguation with any
# other grouped/nested project directory.
SESSION_PARENT_DIR=

project_directory() {
    # Print session directory to stdout, assuming the session names a project.

    local dir sessionname sub

    sessionname="$1"
    shift

    if [ -d "$HOME/src/$sessionname" ]; then
        sub="$HOME/src/$sessionname/$sessionname"
        if [ -d "$sub" ] && [ -d "$sub/.git" ]; then
            echo "$sub"
        else
            echo "$HOME/src/$sessionname"
        fi
        return
    fi

    # Support grouped/nested projects when directory contains shell init files.
    for dir in "$HOME"/src/*/"$sessionname"; do
        up="$(dirname "$dir")"

        if [ -e "$up"/.bashrc ] || [ -e "$up"/.env ]; then
            echo "$dir"
            return
        fi
    done

    if [ -d "$HOME"/src ]; then
        pushd "$HOME"/src >/dev/null 2>&1

        dir="$(git auto-clone --lookup "$sessionname" 2>/dev/null |
                 awk '{ print $1 }')"

        if [ -n "$dir" ] && [ ! -d "$dir" ]; then
            git auto-clone "$dir"
            echo "$PWD"/"$dir"
            return
        fi

        popd >/dev/null 2>&1
    fi

    echo "$HOME/src/$sessionname"
}

screen_running() {
    # Check whether a screen session is running with given name.
    #
    # Note: This function uses the global SCREEN variable set in `main`.

    if [ -z "$@" ]; then
        return 2
    fi

    "$SCREEN" -ls | grep -q "\.$1\s";
}

_sessionname() {
    # Private inner function for `sessionname`.

    if [ -n "$(sessionname_attach "$@")" ]; then
        sessionname_attach "$@"
    elif [ -n "$(sessionname_start "$@")" ]; then
        sessionname_start "$@"
    elif [ $# -eq 0 ]; then
        sessionname_default
    fi
}

sessionname() {
    # Print session name for screen to stdout, based on arguments.
    #
    # Print nothing, if default does not apply and no session name is found.

    sessionname="$(_sessionname "$@")"
    if [ "$(dirname "$sessionname")" != "$sessionname" ]; then
        # Sideload disambiguating parent directory if provided.
        SESSION_PARENT_DIR="$(dirname "$sessionname")"
        basename "$sessionname"
    else
        printf %s "$sessionname"
    fi
}

sessionname_attach() {
    # Print session name for screen attach to stdout, if found in arguments.

    while getopts ":r:x:" opt; do
        case $opt in
            r|x)
                echo "$OPTARG"
                break
                ;;
        esac
    done
}

sessionname_default() {
    # Print default session name for new screen to stdout.
    #
    # Use basename of $PWD as sessionname, e.g. ~/src/project is "project".

    echo "${PWD##*/}"
}

sessionname_start() {
    # Print session name for new screen to stdout, if found in arguments.

    while getopts ":S:" opt; do
        case $opt in
            S)
                echo "$OPTARG"
                break
                ;;
        esac
    done
}

sessions() {
    # Print all possible sessions to stdout.

    local auto_clone_file path sub

    {
        cd "$HOME"/src
        for path in *; do
            if [ -d "$path" ]; then
                if [ -d "$path"/.git ]; then
                    echo "$path"
                fi
                if [ -e "$path"/.bashrc ] || [ -e "$path"/.env ]; then
                    for sub in "$path"/*; do
                        if [ -d "$sub" ] && [ -d "$sub/.git" ]; then
                            echo "$sub"
                            echo "$(basename "$sub")"
                        fi
                    done
                fi
            fi
        done

        cd "$HOME"/src
        git auto-clone --list 2>/dev/null
        git auto-clone --list 2>/dev/null | awk -F/ '{ print $NF }'
    } | sort -u
}

main() {
    # Start & attach sessions automatically.

    DIR="$( cd -P "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
    . "$DIR"/wrapper.bash

    SCREEN="$(set_aside_this_and_find_that "$DIR" screen)"
    SCREEN_WRAPPER="$DIR"/screen

    if [ -z "$SCREEN" ]; then
        # No other `screen` found.
        # Expect set-aside function to write a not-found message to stderr.
        return 2
    fi

    # Hook to indicate that this variant of `screen` can populate sessions.
    if requested "--sessions-available" "$@"; then
        return 0
    elif requested "--sessions" "$@"; then
        sessions "$@"
        return 0
    fi

    sessionname="$(sessionname "$@")"

    # Re-attach to screen if already running.
    if screen_running "$sessionname"; then
        exec "$SCREEN" -x "$sessionname"
    fi

    # Screen is not running. If request to attach, start screen automatically.
    if [ -n "$(sessionname_attach "$@")" ]; then
        project="$(project_directory "$sessionname")"
        if [ ! -d "$project" ]; then
            echo "There is no screen to be resumed matching $sessionname." >&2
            return 1
        fi
        # Start screen in background.
        cd "$project"; "$SCREEN_WRAPPER" -fn -dmS "$sessionname"
        # Wait for screen.
        while ! screen -ls "$sessionname"  > /dev/null 2>&1; do
            sleep 0.05
        done
        # Attach to new screen.
        exec "$SCREEN" -x "$sessionname"
    fi

    # Build an array of options & arguments to inject into screen command call.
    declare -a arg

    # Set session name if not provided in arguments.
    if [ -n "$sessionname" ] && [ -z "$(sessionname_start "$@")" ]; then
        arg+=( -S "$sessionname" )
    fi

    # Select a screenrc, in order of priority (see comment at top of file).
    if [ -e "${SCREENRC}-${USER}" ]; then
        arg+=( -c "$SCREENRC-${USER}" )
    elif [ -e "$SCREENRC" ]; then
        arg+=( -c "$SCREENRC" )
    elif [ -e "$SCREENRC_DEFAULT" ]; then
        arg+=( -c "$SCREENRC_DEFAULT" )
    fi

    # Pick up relative environment configuration before calling screen.
    if command -v source_these > /dev/null 2>&1; then
        walk_root_to_curdir omit_home source_these .bashrc .env #dir
    fi

    exec "$SCREEN" "${arg[@]}" "$@"
}

main "$@"
