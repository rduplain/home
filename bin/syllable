#!/usr/bin/env python3
# Command-line syllable counter.
#
# Count and reformat
# input file syllables
# with NLTK.

#: Name of this command-line program.
PROG = "syllable"

import sys

if sys.version_info < (3, 6):
    sys.stderr.write(PROG + " error: Python 3.6+ required\n")
    sys.exit(128)

#: Map third-party requirement import name to PyPI name, str -> str.
REQUIREMENTS = {
    "nltk": "nltk",
    "syllables": "syllables",
}

import argparse
import doctest
import os
import pathlib
import platform
import re

# Support distribution as script; detect and report import issues.
for import_name, pypi_name in REQUIREMENTS.items():
    try:
        __import__(import_name)
    except ImportError:
        message = f"{PROG}: error: no {import_name} (pip install {pypi_name})"
        print(message, file=sys.stderr)
        sys.exit(1)

import nltk
import syllables
from nltk.corpus import cmudict

# Set a sensible default nltk_data directory for `nltk` download..
HOME = os.environ.get("HOME")
if os.environ.get("NLTK_DATA"):
    nltk_data = os.environ["NLTK_DATA"]
elif HOME and platform.system() == "Linux":
    nltk_data = str(pathlib.Path(HOME).joinpath(".cache", "nltk_data"))
elif HOME and platform.system() == "Darwin":
    nltk_data = (
        str(pathlib.Path(HOME).joinpath("Library", "Caches", "nltk_data")),
    )
else:
    nltk_data = None

if nltk_data:
    nltk.data.path.insert(0, nltk_data)

# Load The CMU Pronouncing Dictionary corpus.
try:
    CMUDICT = cmudict.dict()
except LookupError:
    nltk.download("cmudict", download_dir=nltk_data)  # nltk_data can be None
    CMUDICT = cmudict.dict()


class SyllableCounter:
    """Count the syllables of a text or a single word.

    >>> counter = SyllableCounter()
    >>> counter.word("one")
    (1, True, 'one')
    >>> list(counter.text("Test syllable counting."))
    [(1, True, 'Test'), (3, True, 'syllable'), (2, True, 'counting.')]
    >>>
    """

    def __init__(self, pronunciation_dict=None):
        self.pronunciation_dict = pronunciation_dict or CMUDICT

    def text(self, text):
        "Split on whitespace, yielding result of `self.word` on each part."
        for part in text.split():
            yield self.word(part)

    def word(self, word):
        """Count syllables, return: count (int), confident (bool), word (str).

        Treat acronyms as though pronouncing each character.
        Treat any numerals in the word as though pronounced individually.
        """
        if not word.strip():
            return 0, True, word

        # Split /-delimited words, i.e. foo/bar has parts "foo" and "bar".
        if "/" in word:
            parts = [self.word(part) for part in word.split("/")]
            return sum(x[0] for x in parts), all(x[1] for x in parts), word

        # Scrub word for markup characters and trim leading/trailing non-alpha.
        scrub_pattern = r"(^[^0-9a-zA-Z]*|[_\-\*\\]|[^0-9a-zA-Z]*$)"
        scrubbed = re.sub(scrub_pattern, "", word)

        extra = 0  # Track any "extra" pronunciation syllables.

        numerals = re.sub("[^0-9]", "", scrubbed)
        if numerals:
            # Count numerals as though they are pronounced individually.
            extra += sum(self._count_numeral(numeral) for numeral in numerals)
            scrubbed = re.sub("[0-9]", "", scrubbed)

        if scrubbed.isupper():
            # Split acronym and count as though pronouncing each character.
            count = sum(self._count_char(char) for char in scrubbed)
            return count + extra, True, word

        if not scrubbed.strip():
            return 0 + extra, True, word

        count = self._count_cmudict(scrubbed)
        if count is not None:
            # Return confidently.
            return count + extra, True, word
        else:
            # Fallback.
            return self._count_estimate(scrubbed) + extra, False, word

    def _count_char(self, char):
        "Count the syllables of the pronunciation of a character."
        # cmudict has character pronunciations.
        return self._count_cmudict(char)

    def _count_cmudict(self, word):
        "Count the word's syllables, as known by cmudict, None if unknown."
        # cmudict maps
        # lowercase word to [<pronunciation 1>, ..., <pronunciation N>].
        #
        # <pronunciation> is a list of phoneme with vowels marked for stress,
        # 1=primary, 2=secondary, 0=no stress.
        #
        # Count the syllables of the shortest pronunciation alternative.
        try:
            pronunciations = self.pronunciation_dict[word.lower()]
        except KeyError:
            return None

        counts = []
        for pronunciation in pronunciations:
            count = 0
            for piece in pronunciation:
                if piece[-1].isdigit():
                    # Marked with stress, therefore is a syllable.
                    count += 1
            counts.append(count)

        return min(counts)

    def _count_estimate(self, word):
        "Estimate syllables in word."
        return syllables.estimate(word)

    def _count_numeral(self, numeral):
        "Count syllables of formal pronunciation of numeral."
        numeral_syllables = {
            "0": 2,
            "1": 1,
            "2": 1,
            "3": 1,
            "4": 1,
            "5": 1,
            "6": 1,
            "7": 2,
            "8": 1,
            "9": 1,
        }
        return numeral_syllables[numeral]


def write_status_line(line, counted, out=sys.stdout, err=sys.stderr):
    """Write statusline with total, whether fully confident, inline counts.

    jargon words aren't always found
      7 = 2:jargon 1:words 1:aren't 2:always 1:found

    namespaces are important
      8 ~ 4?:namespaces 1:are 3:important
    """
    counted = list(counted)  # Fully realize.

    syllable_count = 0
    fully_confident = True

    for count, confident, word in counted:
        syllable_count += count
        fully_confident = fully_confident and confident

    out.write(str(syllable_count).rjust(3))
    out.write(" ")
    if fully_confident:
        out.write("=")
    else:
        out.write("~")

    for count, confident, word in counted:
        out.write(" ")
        out.write(str(count))
        if not confident:
            out.write("?")
        out.write(":")
        out.write(word)

    out.write("\n")
    out.flush()


def write_summary(line, counted, out=sys.stdout, err=sys.stderr):
    "Write line prefixed with total syllable count."
    syllable_count = 0
    for count, confident, word in counted:
        if not confident:
            message = f"{PROG}: not confident in '{word}' ({count}?)"
            print(message, file=err)
        syllable_count += count

    print(str(syllable_count).rjust(3), line.rstrip(), file=out)


OUTPUT_WRITERS = {
    "statusline": write_status_line,
    "summary": write_summary,
}


def test():
    """Run self test.

    >>> counter = SyllableCounter()
    >>>
    >>> counter.word("HTML")  # "H T M L"
    (4, True, 'HTML')
    >>> counter.word("WWW")  # "W W W"
    (9, True, 'WWW')
    >>> counter.word("CI/CD")  # "C I C D"
    (4, True, 'CI/CD')
    >>> counter.word("flake8")  # "flake eight"
    (2, True, 'flake8')
    >>> counter.word("foo/bar/baz")  # "foo bar baz"
    (3, True, 'foo/bar/baz')
    >>> counter.word("nooneknows")  # Estimate.
    (3, False, 'nooneknows')
    >>> counter.word("word/nooneknows")  # Estimate.
    (4, False, 'word/nooneknows')
    >>>
    >>> counter.word("(this)")
    (1, True, '(this)')
    >>> list(counter.text("(it's valid)"))
    [(1, True, "(it's"), (2, True, 'valid)')]
    >>>
    """
    doctest.testmod()


def build_argument_parser(prog=PROG, output_writers=OUTPUT_WRITERS):
    "Build `argparse.ArgumentParser` instance with program usage."

    parser = argparse.ArgumentParser(prog=prog)
    formats = list(sorted(output_writers.keys()))

    parser.add_argument("--format", "-f", choices=formats, default="summary")

    return parser


def main(argv=sys.argv, output_writers=OUTPUT_WRITERS):
    "Read stdin, print each line to stdout with syllable count."

    if "--self-test" in argv:
        return test()

    parser = build_argument_parser()
    args = parser.parse_args()

    counter = SyllableCounter()
    write = output_writers[args.format]

    for line in sys.stdin:
        if not line.strip():
            print()
            continue

        write(line, counter.text(line))


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        pass
