#!/usr/bin/env bash
# box: configure Unix host at user level.
#
# Require no `sudo` but assume system-level tools are in place.
# Assume that `.bootstrap.bash` has provided initial setup.

# Exit immediately if a command error or non-zero return occurs.
set -e

box="${BASH_SOURCE[0]}"
export BOX_HOME="$( cd -P "$(dirname "$box")"/.. && pwd )"

bin="$BOX_HOME"/bin
etc="$BOX_HOME"/etc
lib="$BOX_HOME"/lib
sbin="$BOX_HOME"/sbin

reqd="$bin"/reqd

source "$lib"/box.bash
source "$lib"/core.bash
source "$lib"/env.bash

export BOX_PRIVATE=home
export QWERTY_SH="$bin"/qwerty.sh

[[ -e "$etc"/env ]] && eval "$(sourceable "$etc"/env)"

# Note: Prefer /opt/setup/box to avoid .bashrc PATH finding /opt/box/bin.
export BOX_SYSTEM_BOX=${BOX_SYSTEM_BOX:-/opt/setup/box/bin/box}

main() {
    # Configure system.

    if [ ! -x "$reqd" ]; then
        echo "Uninitialized. Run \`~/.bootstrap.bash\`." >&2
        return 2
    fi

    if [ $# -gt 0 ]; then
        # Dispatch a `box` subcommand.

        local command="$1"
        shift

        case "$command" in
            install)
                install "$@"
                ;;
            recipe)
                recipe "$@"
                ;;
            reset)
                reset "$@"
                ;;
            *)
                echo "box: no such user-level subcommand: $command" >&2
                return 2
                ;;
        esac

        return
    fi

    # Proceed with no-argument, general-purpose `box` invocation.

    echo "user-level '${BOX:-(unset)}' purpose \`box\` (\$BOX)"

    rev="$(home-head)"
    "$reqd" install update
    if [ "$rev" != "$(home-head)" ]; then
        echo 'Restarting `box` with update ...' >&2
        exec "$box"
    fi

    "$reqd" install qwerty.sh-rev
    "$reqd" install reqd-rev

    [[ -x "$BOX_SYSTEM_BOX" ]] && sudo "$BOX_SYSTEM_BOX"
    [[ -x "$sbin"/private ]] && "$reqd" install private
    [[ -x "$sbin"/user ]] && "$reqd" install user
    [[ -x "$sbin"/user-rc.local ]] && "$reqd" install user-rc.local
    [[ -x "$sbin"/upkeep ]] && "$reqd" install upkeep

    [[ -x "$bin"/rc.local ]] && "$bin"/rc.local

    appliance
    if [ "$BOX"  = "appliance" ]; then return; fi
    standard
    if [ "$BOX" != "development" ] && [ "$BOX" != "full" ]; then return; fi
    development
    if [ "$BOX" != "full" ]; then return; fi
    full
}


# Dispatch functions for BOX levels 'appliance' through 'full'.

appliance() {
    :
}

standard() {
    "$reqd" install \
            fc-cache

    if [ -n "$XAUTHORITY" ]; then
        # X detected.
        "$reqd" install \
                theme
    fi
}

development() {
    "$reqd" install emacs.d

    "$reqd" install \
            clojure \
            ocaml \
            go \
            haskell \
            haxelib \
            node-config \
            kotlin \
            pyenv \
            rbenv \
            rust \
            sbt

    "$reqd" install \
            circleci-cli \
            packer \
            terraform \
            vagrant-config
}

full() {
    :
}


# Dispatch functions for `box` subcommands.

recipe() {
    # Determine whether `box` has a given recipe.

    local missing_system missing_user

    for recipe in "$@"; do
        if [ -x "$BOX_SYSTEM_BOX" ]; then
            if ! sudo "$BOX_SYSTEM_BOX" recipe "$recipe"; then
                missing_system=true
            fi
        else
            missing_system=true
        fi

        if [ -x "$sbin/$recipe" ]; then
            echo "$sbin/$recipe"
        else
            echo "box: no user-level recipe found: $recipe" >&2
            missing_user=true
        fi
    done

    if [ -n "$missing_system" ] && [ -n "$missing_user" ]; then
        return 1
    fi
}

install() {
    # Install individual recipe(s) with both system- and user-level `box`.

    for recipe in "$@"; do
        if [ -x "$BOX_SYSTEM_BOX" ]; then
            if sudo "$BOX_SYSTEM_BOX" recipe "$recipe" > /dev/null; then
                sudo "$BOX_SYSTEM_BOX" install "$recipe"
            fi
        fi
    done

    echo "user-level '${BOX:-(unset)}' purpose \`box\` (\$BOX)"

    for recipe in "$@"; do
        if BOX_SYSTEM_BOX= recipe "$recipe" > /dev/null 2>&1; then
            "$reqd" install "$recipe"
        fi
    done
}

reset() {
    # Reset an aspect of `box` state.

    local command="$1"
    shift

    case "$command" in
        src)
            reset_src "$@"
            ;;
        *)
            echo "box: no such user-level reset: $command" >&2
            return 2
            ;;
    esac
}

reset_src() {
    # Reset upstream src reference.

    if [ ! -x "$BOX_SYSTEM_BOX" ]; then
        echo "error: no system-level box at $BOX_SYSTEM_BOX" >&2
        return 2
    fi

    sudo "$BOX_SYSTEM_BOX" reset src
}

main "$@"
